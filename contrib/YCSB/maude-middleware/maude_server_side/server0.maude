load shim-dynamic-new

mod SERVER is
  pr SHIM-DYNAMIC .
  pr MAP{String,String} .
  pr LIST{Oid} .

  sort Table .
  subsort Table < Cid .
  op Table : -> Table .

  op tb : -> Oid .

  op table :_ : Map{String,String} -> Attribute [ctor gather(&)] . 


  sort Server .  *** Shim has as ID l(IP,0), e.g., l("localhost",0)
  subsort Server < Cid .
  op Server : -> Server .

  op store :_ : Map{String, String} -> Attribute [ctor gather(&)] .  


  vars AS AS' : AttributeSet .
  vars O O' O'' TB : Oid .
  vars N' N : Nat .
  vars STR KV READ KR VALUE : String .
  vars STORE KVS : Map{String,String} .


---(
  *** load 
 crl < O : Server | store : STORE >
     [KV]
   => 
     < O : Server | store : insert(substr(KV,0,N),substr(STR,0,N'),STORE) >  
     if N := find(KV, "[eok]", 0) /\ 
        STR := substr(KV, N + 5, length(KV)) /\
        N' := find(STR, "[eov]", 0) .
)

 *** load
  crl < O : Server | store : STORE >
      [KV,O]
    =>
      < O : Server | store : addKeyValue(KV,STORE) >
      if N := find(KV,"[eov]",0) .

  *** post load
 crl < O : Table | table : KVS >
    [KR,O]
  => 
    < O : Table | table : addKeyReplica(KR,KVS) >
    if N := find(KR,"[eoa]",0) .

 op addKeyValue : String Map{String,String} -> Map{String,String} .
  ceq addKeyValue(KV,STORE) = addKeyValue(substr(STR,N' + 
5,length(STR)),insert(substr(KV,0,N),substr(STR,0,N'),STORE))
        if N := find(KV, "[eok]", 0) /\
         STR := substr(KV, N + 5, length(KV)) /\
          N' := find(STR, "[eov]", 0) .
   eq addKeyValue("",STORE) = STORE .

  op addKeyReplica : String Map{String,String} -> Map{String,String} .
 ceq addKeyReplica(KR,KVS) = addKeyReplica(substr(STR,N' + 5,length(STR)),insert(substr(KR,0,N),substr(STR,0,N'),KVS))
       if N := find(KR, "[eok]", 0) /\ 
        STR := substr(KR, N + 5, length(KR)) /\
         N' := find(STR, "[eoa]", 0) .
  eq addKeyReplica("",KVS) = KVS .


  *** txn
 crl < O : Server | AS >
     < TB : Table | table : KVS, AS' >
     (msg READ from O' to O)
   => 
     < O : Server | AS >
     < TB : Table | table : KVS, AS' >
     genReads(READ,KVS,O,O')
     if N := find(READ,"[eor]",0) .

  op genReads : String Map{String,String} Oid Oid -> Configuration .
 ceq genReads(READ,KVS,O,O') = genReads(STR,KVS,O,O')
       if KVS[substr(READ,0,N)] == undefined
         then none
         else (msg substr(READ,0,N + 5) from O to l(KVS[substr(READ,0,N)]) and O')
       fi
     if N := find(READ, "[eor]", 0) /\
        STR := substr(READ,N + 5,length(READ)) .
  eq genReads("",KVS,O,O') = none .




 crl < O : Server | AS >
     < TB : Table | table : KVS, AS' >
     (msg KV from O' to O)
   => 
     < O : Server | AS >
     < TB : Table | table : KVS, AS' >
     genWrites(KV,KVS,O,O')
     if N := find(KV,"[eov]",0) .

  op genWrites : String Map{String,String} Oid Oid -> Configuration .
  eq genWrites("",KVS,O,O') = none .
 ceq genWrites(KV,KVS,O,O') = genWrites(substr(KV,N' + 5,length(KV)),KVS,O,O')
       if l(KVS[substr(KV,0,N)]) == undefined
         then none
         else (msg substr(KV,0,N' + 5) from O to l(KVS[substr(KV,0,N)]) and O')  
       fi 
     if N := find(KV, "[eok]", 0) /\
        N' := find(KV, "[eov]", 0) .



  crl < O : Server | store : STORE >
      (msg READ from O' to O and O'')
    =>
      < O : Server | store : STORE >
      (msg STORE[substr(READ,0,N)] from O to O' and O'')
      if N := find(READ, "[eor]", 0) . 



 crl < O : Server | store : STORE >
     (msg KV from O' to O and O'')
   => 
     < O : Server | store : insert(substr(KV,0,N),substr(STR,0,N'),STORE) > 
     (msg "done" from O to O' and O'') 
     if N := find(KV, "[eok]", 0) /\ 
        STR := substr(KV, N + 5, length(KV)) /\
        N' := find(STR, "[eov]", 0) .


  crl < O : Server | AS >
      (msg VALUE from O' to O and O'')
    =>
      < O : Server | AS >
      (msg VALUE from O to O'') 
      if find(VALUE,"[eok]",0) == notFound /\
         find(VALUE,"[eor]",0) == notFound /\
         ip(O) == "155.98.38.154" .
	 --- Above IP is that of server 0, one that client contacts


  eq numberOfServerSockets = 2 .

---(
  *** maude client ip
  op client-addr : -> Oid .
  eq client-addr = l(addr,2) .

  op addr : -> String .
  eq addr = "155.98.38.154" .
)

  op self : -> String .
  eq self = "155.98.38.154" .

  eq port = 9810 .
  op init : -> Configuration .
  eq init = <>
            < l(self,0) : ServerShim | sockets : none, contacts : empty, bufferedMsgs : none, created : 0 >
            < l(self) : Server | store : empty >
            createServerTcpSocket(socketManager, l(self), 9810, 5) 
            createServerTcpSocket(socketManager, l(self), 9710, 5) 

            < l(self,1) : ClientShim | sockets : none, contacts : empty, bufferedMsgs : none >
            < tb : Table | table : empty > .
           
endm

erew init .

